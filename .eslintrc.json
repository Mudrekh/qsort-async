// Refer to http://eslint.org/docs/rules/ for details on each rule and how to configure them
{
  "env": {
    "node": true,
    "es6": true
  },
  "parserOptions": {
    "ecmaVersion": 8 // support for async/await
  },
  "plugins": [
    "chai-friendly"
  ],
  "rules": {
    // Possible errors
    "no-await-in-loop": [
      "error"
    ],
    "no-compare-neg-zero": [
      "error"
    ],
    "no-cond-assign": [
      "error"
    ],
    "no-console": [
      "error"
    ],
    "no-constant-condition": [
      "error"
    ],
    "no-control-regex": [
      "error"
    ],
    "no-debugger": [
      "error"
    ],
    "no-dupe-args": [
      "error"
    ],
    "no-dupe-keys": [
      "error"
    ],
    "no-duplicate-case": [
      "error"
    ],
    "no-empty": [
      "error"
    ],
    "no-empty-character-class": [
      "error"
    ],
    "no-ex-assign": [
      "error"
    ],
    "no-extra-boolean-cast": [
      "error"
    ],
    "no-extra-parens": [
      "error",
      "all", {
        "nestedBinaryExpressions": false
      }
    ],
    "no-extra-semi": [
      "error"
    ],
    "no-func-assign": [
      "error"
    ],
    "no-inner-declarations": [
      "error"
    ],
    "no-invalid-regexp": [
      "error"
    ],
    "no-irregular-whitespace": [
      "error"
    ],
    "no-obj-calls": [
      "error"
    ],
    "no-regex-spaces": [
      "error"
    ],
    "no-sparse-arrays": [
      "error"
    ],
    "no-template-curly-in-string": [
      "error"
    ],
    "no-unexpected-multiline": [
      "error"
    ],
    "no-unreachable": [
      "error"
    ],
    "no-unsafe-finally": [
      "error"
    ],
    "no-unsafe-negation": [
      "error"
    ],
    "use-isnan": [
      "error"
    ],
    "valid-jsdoc": [
      "error"
    ],
    "valid-typeof": [
      "error"
    ],
    // Best practices
    "accessor-pairs": [
      "error"
    ],
    "array-callback-return": [
      "error"
    ],
    "block-scoped-var": [
      "error"
    ],
    "class-methods-use-this": [
      "error"
    ],
    "complexity": [
      "error"
    ],
    "consistent-return": [
      "error"
    ],
    "curly": [
      "error"
    ],
    "default-case": [
      "error"
    ],
    "dot-location": [
      "error",
      "property"
    ],
    "dot-notation": [
      "error"
    ],
    "eqeqeq": [
      "error"
    ],
    "guard-for-in": [
      "error"
    ],
    "no-alert": [
      "error"
    ],
    "no-caller": [
      "error"
    ],
    "no-case-declarations": [
      "error"
    ],
    "no-div-regex": [
      "error"
    ],
    "no-else-return": [
      "error"
    ],
    "no-empty-function": [
      "error"
    ],
    "no-empty-pattern": [
      "error"
    ],
    "no-eq-null": [
      "error"
    ],
    "no-eval": [
      "error"
    ],
    "no-extend-native": [
      "error"
    ],
    "no-extra-bind": [
      "error"
    ],
    "no-extra-label": [
      "error"
    ],
    "no-fallthrough": [
      "error"
    ],
    "no-floating-decimal": [
      "error"
    ],
    "no-global-assign": [
      "error"
    ],
    "no-implicit-coercion": [
      "error"
    ],
    "no-implicit-globals": [
      "error"
    ],
    "no-implied-eval": [
      "error"
    ],
    "no-invalid-this": [
      "error"
    ],
    "no-iterator": [
      "error"
    ],
    "no-labels": [
      "error"
    ],
    "no-lone-blocks": [
      "error"
    ],
    "no-loop-func": [
      "error"
    ],
    "no-magic-numbers": [
      "error", {
        "ignoreArrayIndexes": true,
        "ignore": [-1,
          0,
          1
        ]
      }
    ],
    "no-multi-spaces": [
      "error"
    ],
    "no-multi-str": [
      "error"
    ],
    "no-new": [
      "error"
    ],
    "no-new-func": [
      "error"
    ],
    "no-new-wrappers": [
      "error"
    ],
    "no-octal": [
      "error"
    ],
    "no-octal-escape": [
      "error"
    ],
    "no-proto": [
      "error"
    ],
    "no-redeclare": [
      "error"
    ],
    "no-restricted-properties": [
      "error", {
        "object": "arguments",
        "property": "callee",
        "message": "arguments.callee is deprecated"
      }, {
        "property": "__defineGetter__",
        "message": "Please use Object.defineProperty instead."
      }, {
        "property": "__defineSetter__",
        "message": "Please use Object.defineProperty instead."
      }, {
        "object": "Math",
        "property": "pow",
        "message": "Use the exponentiation operator (**) instead."
      }
    ],
    "no-return-assign": [
      "error"
    ],
    "no-return-await": [
      "error"
    ],
    "no-script-url": [
      "error"
    ],
    "no-self-assign": [
      "error"
    ],
    "no-self-compare": [
      "error"
    ],
    "no-sequences": [
      "error"
    ],
    "no-throw-literal": [
      "error"
    ],
    "no-unmodified-loop-condition": [
      "error"
    ],
    "no-unused-expressions": [
      0
    ],
    "chai-friendly/no-unused-expressions": [
      "error"
    ],
    "no-unused-labels": [
      "error"
    ],
    "no-useless-call": [
      "error"
    ],
    "no-useless-concat": [
      "error"
    ],
    "no-useless-escape": [
      "error"
    ],
    "no-useless-return": [
      "error"
    ],
    "no-void": [
      "error"
    ],
    "no-with": [
      "error"
    ],
    "radix": [
      "error"
    ],
    "yoda": [
      "error"
    ],
    // Variables
    "no-catch-shadow": [
      "off"
    ],
    "no-delete-var": [
      "error"
    ],
    "no-label-var": [
      "error"
    ],
    "no-restricted-globals": [
      "error"
    ],
    "no-shadow": [
      "error"
    ],
    "no-shadow-restricted-names": [
      "error"
    ],
    "no-undef": [
      "error"
    ],
    "no-undef-init": [
      "error"
    ],
    "no-undefined": [
      "error"
    ],
    // disallow declaration of variables that are used in the code
    "no-unused-vars": [
      "error", {
        "vars": "all",
        "args": "after-used"
      }
    ],
    "no-use-before-define": [
      "error",
      "nofunc"
    ],
    // Stylistic Issues
    "array-bracket-spacing": [
      "error"
    ],
    "block-spacing": [
      "error"
    ],
    "brace-style": [
      "error"
    ],
    "camelcase": [
      "error", {
        "properties": "never"
      }
    ],
    "comma-dangle": [
      "error"
    ],
    // enforce spacing before and after comma
    "comma-spacing": [
      "error", {
        "before": false,
        "after": true
      }
    ],
    // enforce one true comma style
    "comma-style": [
      "error",
      "last"
    ],
    "computed-property-spacing": [
      "error"
    ],
    "consistent-this": [
      "error",
      "self"
    ],
    // enforce newline at the end of file, with no multiple empty lines
    "eol-last": [
      "error",
      "always"
    ],
    "func-call-spacing": [
      "error"
    ],
    "func-name-matching": [
      "error"
    ],
    "id-blacklist": [
      "error"
    ],
    "id-length": [
      "error", {
        "properties": "always",
        "exceptions": [
          "_",
          "i",
          "j"
        ]
      }
    ],
    "id-match": [
      "error"
    ],
    "indent": [
      "error",
      2, {
        "MemberExpression": 1,
        "FunctionDeclaration": {
          "parameters": "first"
        },
        "CallExpression": {
          "arguments": 1
        },
        "ArrayExpression": 1,
        "ObjectExpression": 1
      }
    ],
    // enforces spacing between keys and values in object literal properties
    "key-spacing": [
      "error", {
        "beforeColon": false,
        "afterColon": true
      }
    ],
    "keyword-spacing": [
      "error"
    ],
    "linebreak-style": [
      "error",
      "unix"
    ],
    "lines-around-comment": [
      "error"
    ],
    "lines-around-directive": [
      "error"
    ],
    "max-depth": [
      "error"
    ],
    "max-len": [
      "error", {
        "code": 120
      }
    ],
    "max-nested-callbacks": [
      "error"
    ],
    "max-params": [
      "error",
      5
    ],
    "max-statements": [
      "error",
      20
    ],
    "max-statements-per-line": [
      "error"
    ],
    "new-cap": [
      "error"
    ],
    "new-parens": [
      "error"
    ],
    "newline-per-chained-call": [
      "error"
    ],
    "no-array-constructor": [
      "error"
    ],
    "no-bitwise": [
      "error"
    ],
    "no-continue": [
      "error"
    ],
    "no-lonely-if": [
      "error"
    ],
    "no-mixed-operators": [
      "error"
    ],
    "no-mixed-spaces-and-tabs": [
      "error"
    ],
    "no-multi-assign": [
      "error"
    ],
    // disallow multiple empty lines and only one newline at the end
    "no-multiple-empty-lines": [
      "error", {
        "max": 2,
        "maxEOF": 1
      }
    ],
    "no-negated-condition": [
      "error"
    ],
    "no-nested-ternary": [
      "error"
    ],
    "no-new-object": [
      "error"
    ],
    "no-restricted-syntax": [
      "error", {
        "selector": "ForInStatement",
        "message": "for..in loops iterate over the entire prototype chain, which is virtually never what you want. Use Object.{keys,values,entries}, and iterate over the resulting array."
      }, {
        "selector": "ForOfStatement",
        "message": "iterators/generators require regenerator-runtime, which is too heavyweight for this guide to allow them. Separately, loops should be avoided in favor of array iterations."
      }, {
        "selector": "LabeledStatement",
        "message": "Labels are a form of GOTO; using them makes code confusing and hard to maintain and understand."
      }, {
        "selector": "WithStatement",
        "message": "`with` is disallowed in strict mode because it makes code impossible to predict and optimize."
      }
    ],
    "no-tabs": [
      "error"
    ],
    "no-trailing-spaces": [
      "error"
    ],
    "no-unneeded-ternary": [
      "error"
    ],
    "no-whitespace-before-property": [
      "error"
    ],
    "nonblock-statement-body-position": [
      "error"
    ],
    "object-curly-newline": [
      "error", {
        "multiline": true,
        "minProperties": 0,
        "consistent": true
      }
    ],
    "object-curly-spacing": [
      "error",
      "always"
    ],
    "object-property-newline": [
      "error"
    ],
    "one-var": [
      "error",
      "never"
    ],
    "one-var-declaration-per-line": [
      "error"
    ],
    "operator-assignment": [
      "error",
      "always"
    ],
    "operator-linebreak": [
      "error",
      "after"
    ],
    "quote-props": [
      "error",
      "as-needed"
    ],
    "quotes": [
      "error",
      "single"
    ],
    "semi": [
      "error",
      "always"
    ],
    "semi-spacing": [
      "error"
    ],
    "space-before-blocks": [
      "error"
    ],
    "space-before-function-paren": [
      "error", {
        "anonymous": "always",
        "named": "never"
      }
    ],
    "space-in-parens": [
      "error"
    ],
    "space-infix-ops": [
      "error"
    ],
    "space-unary-ops": [
      "error"
    ],
    "spaced-comment": [
      "error",
      "always", {
        "line": {
          "markers": [
            "/"
          ],
          "exceptions": [
            "-",
            "+"
          ]
        },
        "block": {
          "markers": [
            "!"
          ],
          "exceptions": [
            "*"
          ],
          "balanced": true
        }
      }
    ],
    "template-tag-spacing": [
      "error"
    ],
    "unicode-bom": [
      "error"
    ],
    "wrap-regex": [
      "error"
    ],
    // Node.js rules
    "callback-return": [
      "error"
    ],
    "global-require": [
      "error"
    ],
    "handle-callback-err": [
      "error"
    ],
    "no-mixed-requires": [
      "error"
    ],
    "no-new-require": [
      "error"
    ],
    "no-path-concat": [
      "error"
    ],
    "no-process-exit": [
      "error"
    ],
    "no-restricted-modules": [
      "error"
    ],
    "no-sync": [
      "error"
    ],
    // require immediate function invocation to be wrapped in parentheses
    // http://eslint.org/docs/rules/wrap-iife.html
    "wrap-iife": [
      "error",
      "inside", {
        "functionPrototypeMethods": false
      }
    ],
    // ES6 RULES
    // enforces no braces where they can be omitted
    // http://eslint.org/docs/rules/arrow-body-style
    // TODO: enable requireReturnForObjectLiteral?
    "arrow-body-style": [
      "error",
      "as-needed", {
        "requireReturnForObjectLiteral": false
      }
    ],
    // require parens in arrow function arguments
    // http://eslint.org/docs/rules/arrow-parens
    "arrow-parens": [
      "error",
      "as-needed", {
        "requireForBlockBody": true
      }
    ],
    // require space before/after arrow function"s arrow
    // http://eslint.org/docs/rules/arrow-spacing
    "arrow-spacing": [
      "error", {
        "before": true,
        "after": true
      }
    ],
    // Allow "confusing arrows" since, well, we don't confuse them
    // http://eslint.org/docs/rules/no-confusing-arrow
    "no-confusing-arrow": "off",
    // disallow modifying variables that are declared using const
    "no-const-assign": "error",
    // disallow renaming import, export, and destructured assignments to the same name
    // http://eslint.org/docs/rules/no-useless-rename
    "no-useless-rename": [
      "error", {
        "ignoreDestructuring": false,
        "ignoreImport": false,
        "ignoreExport": false
      }
    ],
    // require let or const instead of var
    "no-var": "error",
    // require method and property shorthand syntax for object literals
    // http://eslint.org/docs/rules/object-shorthand
    "object-shorthand": [
      "error",
      "always", {
        "ignoreConstructors": false,
        "avoidQuotes": true
      }
    ],
    // suggest using arrow functions as callbacks
    "prefer-arrow-callback": [
      "error", {
        "allowNamedFunctions": false,
        "allowUnboundThis": true
      }
    ],
    // suggest using of const declaration for variables that are never modified after declared
    "prefer-const": [
      "error", {
        "destructuring": "any",
        "ignoreReadBeforeAssign": true
      }
    ],
    // Prefer destructuring from arrays and objects
    // http://eslint.org/docs/rules/prefer-destructuring
    // TODO: enable
    "prefer-destructuring": [
      "off", {
        "VariableDeclarator": {
          "array": false,
          "object": true
        },
        "AssignmentExpression": {
          "array": true,
          "object": true
        }
      }, {
        "enforceForRenamedProperties": false
      }
    ],
    // disallow parseInt() in favor of binary, octal, and hexadecimal literals
    // http://eslint.org/docs/rules/prefer-numeric-literals
    "prefer-numeric-literals": "error",
    // suggest using Reflect methods where applicable
    // http://eslint.org/docs/rules/prefer-reflect
    "prefer-reflect": "off",
    // use rest parameters instead of arguments
    // http://eslint.org/docs/rules/prefer-rest-params
    "prefer-rest-params": "off",
    // suggest using the spread operator instead of .apply()
    // http://eslint.org/docs/rules/prefer-spread
    "prefer-spread": "error",
    // suggest using template literals instead of string concatenation
    // http://eslint.org/docs/rules/prefer-template
    "prefer-template": "error",
    // disallow generator functions that do not have yield
    // http://eslint.org/docs/rules/require-yield
    "require-yield": "error",
    // enforce spacing between object rest-spread
    // http://eslint.org/docs/rules/rest-spread-spacing
    "rest-spread-spacing": [
      "error",
      "never"
    ],
    // enforce usage of spacing in template strings
    // http://eslint.org/docs/rules/template-curly-spacing
    "template-curly-spacing": "error"
  }
}
